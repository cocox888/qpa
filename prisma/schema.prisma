// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  member
  client
}

enum PreferedContactMethod {
  email
  phone
  app
}

enum FileShareMethod {
  googleDrive
  dropBox
  oneDrive
  other
}

enum Often {
  daily
  weekly
  other
}

enum ReceiveUpdates {
  email
  videoCall
  app
  pmTool
}

enum BillingMethod {
  creditCard
  bankTransfer
}

enum BillingCycle {
  weekly
  monthly
}

enum Status {
  online
  away
  offline
}

model User {
  id          Int           @id @default(autoincrement()) // Automatically adds a primary key
  first_name  String
  last_name   String
  full_name   String
  email       String        @unique
  password    String
  phone       String
  position    String
  role        Role          @default(admin)
  avatar      String?
  dob         String
  address     String
  city        String
  state       String
  country     String
  zip_code    String
  tasks       Task[]
  projects    Project[]
  TimeTracker TimeTracker[]
  status      Status?        @default(online)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Client {
  id                       Int                    @id @default(autoincrement()) // Primary key
  full_name                String
  password                 String
  business_name            String? // Optional field
  personal_address         String
  business_address         String?
  position                 String
  email                    String                 @unique
  phone                    String
  preferred_contact_method PreferedContactMethod? @default(email)
  timezone                 String
  default_services         String[]
  other_services           String[]
  priorities               String?
  support_hours            Int?
  use_tools                String[]
  access_specific          Boolean?
  file_share_method        FileShareMethod?       @default(googleDrive)
  required_access          String?
  often                    Often?                 @default(daily)
  receive_updates          ReceiveUpdates?        @default(email)
  key_people               String[]
  particular_task          String?
  start_date               DateTime?
  billing_method           BillingMethod?         @default(creditCard)
  billing_cycle            BillingCycle?          @default(weekly)
  invoice_email            String?
  emergency_contact_name   String?
  emergency_contact_phone  String?
  emergency_relationship   String?
  digital_sign             String
  sign_date                DateTime
  Project                  Project[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//***************** Project *******************//
enum PackageType {
  va
  smm
  obm
  wds
}

enum Duration {
  w2
  m1
  m2
  m3
  m6
  m12
}

enum PackageLevel {
  basic
  standard
  premium
}

enum ProjectType {
  website
  redesign
  maintenance
  ecommerce
}

model Project {
  id            Int           @id @default(autoincrement()) // Primary Key
  project_name  String
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      Int
  package_type  PackageType   @default(va)
  monthly_hours Int?
  rate          Int?
  start_date    String
  rollover      Boolean?
  platforms     String[]
  duration      Duration?     @default(m1)
  package_level PackageLevel? @default(basic)
  services      String[]
  project_type  ProjectType?  @default(website)
  technology    String[]
  additional_setting String[]
  portal_access      String[]

  users User[]
  tasks Task[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//***************** Task *******************//
enum Priority {
  low
  medium
  high
}

enum TaskState {
  todo
  progress
  review
  done
}

model Task {
  id             Int       @id @default(autoincrement()) // Primary Key
  task_name      String
  project        Project   @relation(fields: [projectId], references: [id])
  projectId      Int
  due_date       String
  priority       Priority? @default(low)
  description    String?
  users          User[]
  estimated_time Int?
  state          TaskState @default(todo)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//***************** Time Tracker *******************//
model TimeTracker {
  id         Int      @id @default(autoincrement()) // Primary Key
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  start_time DateTime
  end_time   DateTime
  message    String?
}

//***************** Setting *******************//
